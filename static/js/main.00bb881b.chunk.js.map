{"version":3,"sources":["components/Result.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["Result","props","_props$weather","weather","err","city","date","sunrise","sunset","temperature","pressure","wind","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","react_default","a","createElement","className","concat","Form","type","value","placeholder","onChange","change","App","state","presure","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","api","fetch","then","response","ok","Error","json","result","time","toLocaleString","sys","main","temp","toFixed","speed","catch","console","log","components_Form","error","components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00bb881b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Result = props => {\n  const {\n    err,\n    city,\n    date,\n    sunrise,\n    sunset,\n    temperature,\n    pressure,\n    wind\n  } = props.weather;\n\n  let content = null;\n  if (!err && city) {\n    let sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n    let sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n    content = (\n      <section>\n        <h3>\n          Pogoda dla : <strong>{city}</strong>\n        </h3>\n        <h4>Dane dla {date} </h4>\n        <h4> Aktualna temperatura: {temperature} &#176;C </h4>\n        <h4> Wschód słońca o: {sunriseTime} </h4>\n        <h4> Zachód słońca o: {sunsetTime} </h4>\n        <h4> Aktualne ciśnienie: {pressure} hPa </h4>\n        <h4> Prędkość wiatru: {wind} m/s </h4>\n      </section>\n    );\n  }\n  return (\n    <div className=\"result\">{err ? `Nie mamy w bazie ${city}` : content}</div>\n  );\n};\nexport default Result;\n","import React from \"react\";\n\nconst Form = props => {\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={props.value}\n        placeholder=\"wpisz miasto\"\n        onChange={props.change}\n      />\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Result from \"./Result\";\nimport Form from \"./Form\";\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temperature: \"\",\n    presure: \"\",\n    wind: \"\",\n    err: false\n  };\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 1) return;\n\n    if (prevState.value !== this.state.value) {\n      const api = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=930abecef9db495d58e58eb9af3e4e2f&units=metric`;\n      fetch(api)\n        .then(response => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"nie udało się\");\n        })\n        .then(response => response.json())\n        .then(result => {\n          const time = new Date().toLocaleString();\n          this.setState(state => ({\n            date: time,\n            city: state.value,\n            sunrise: result.sys.sunrise,\n            sunset: result.sys.sunset,\n            temperature: result.main.temp.toFixed(0),\n            pressure: result.main.pressure,\n            wind: result.wind.speed,\n            err: false\n          }));\n        })\n\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }));\n        });\n    }\n  }\n\n  // handleCitySubmit = e => {\n  //   e.preventDefault();\n  //   const api = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=930abecef9db495d58e58eb9af3e4e2f&units=metric`;\n  //   fetch(api)\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response;\n  //       }\n  //       throw Error(\"nie udało się\");\n  //     })\n  //     .then(response => response.json())\n  //     .then(result => {\n  //       const time = new Date().toLocaleString();\n  //       this.setState(prevState => ({\n  //         date: time,\n  //         city: prevState.value,\n  //         sunrise: result.sys.sunrise,\n  //         sunset: result.sys.sunset,\n  //         temperature: result.main.temp.toFixed(0),\n  //         pressure: result.main.pressure,\n  //         wind: result.wind.speed\n  //       }));\n  //     })\n\n  //     .catch(err => {\n  //       console.log(err);\n  //       this.setState(prevState => ({\n  //         err: true,\n  //         city: prevState.value\n  //       }));\n  //     });\n  // };\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"first\"> Sprawdź pogodę na dziś </p>\n        <Form\n          value={this.state.value}\n          error={this.state.err}\n          change={this.handleInputChange}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}